FORMAT: 1A
HOST: https://hello-books-flask-api.herokuapp.com

# hello-books-api

This is an API part of hello-books - a simple Flask application that helps manage a basic library system
and its processes like stocking,tracking and renting books.
New users can create new accounts and use them to rent and return books using the api.

## Create account [/api/v1/auth/register]
### new account [POST]
 + Request (application/json)
        
        {
        'username': 'James',
        'password': 'Kent'
        }
        
 + Response 201 (application/json)

        {
        'user details': {'username': 'James', 'password': 'Kent', 'admin': False}
        }
        
## User details [/api/v1/auth/reset]
### reseting user password [PUT]

User can change his/her account password through this endpoint


+ Request (application/json)

        {
        'username': 'mbuvi', 'new_password': 'meshack'
        }
        
+ Response 200 (application/json)
        
        {}

## Books Collection [/api/v1/books/]

### List All Books [GET]

This endpoint retrieves all books that are in the system.

+ Response 200 (application/json)

        [
            {
            '1': {'title': 'Test Driven Development', 'author': 'Kent Beck', 'available': True},
            '3': {'title': 'Python Programming', 'author': 'Peter Carl', 'available': True}
            
            }
        ]



### Create a New Book [POST]

Administrators can create a new book by using the following endpoint and sending 
 the specified parameters.

+ Request (application/json)

        {
            'title': 'Test Driven Developemnt',
                'author': 'Kent Beck'
        }

+ Response 201 (application/json)

    + Headers

            Location: /api/v1/books/

    + Body

            {
            'title': 'Test Driven Developemnt', 
            'available': True, 
            'author': 'Kent Beck'
            }
            
## Get a single book [/api/v1/books/{book_id}]    

### Get A single book [GET]

User can retrieve a single book by providing its id.

+ Request (application/json)
        
+ Response 200 (application/json)

        {
            'title': 'Python Programming', 'available': True, 'author': 'Peter Carl'
        }


### Edit book info [PUT]
+ Request (application/json)
        
        {
        'id': book_id, 'title': 'Learn Java the Hard way',
                    'author': 'Meshack'
        }
        
+ Response 201 (application/json)

        {
        'title': 'Learn Java the Hard way',
        'author': 'Meshack',
        'available': True
        }
        
###Delete a book [DELETE]

+ Request (application/json)
        
+ Response 204 (application/json)