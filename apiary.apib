FORMAT: 1A
HOST: https://hello-books-flask-api.herokuapp.com

# hello-books-api

This is an API part of hello-books - a simple Flask application that helps manage a basic library system
and its processes like stocking,tracking and renting books.
New users can create new accounts and use them to rent and return books using the api.


## Create account [/api/v1/auth/register]
### new account [POST]

 + Request (application/json)
        
        {
        'username': 'James',
        'password': 'Kent'
        }
        
 + Response 201 (application/json)

        {
        'user details': {'username': 'James', 'password': 'Kent', 'admin': False}
        }
        
## User details [/api/v1/auth/reset]
### reseting user password [PUT]

User can change his/her account password through this endpoint


+ Request (application/json)

        {
        'username': 'mbuvi', 'new_password': 'meshack'
        }
        
+ Response 200 (application/json)
        
        {}
        
## User details [/api/v1/auth/login]

### user login [POST]

User can change his/her account password through this endpoint. After successful login, the user is assigned a token.


+ Request (application/json)

        {
        'username': 'mbuvi', 'password': 'meshack'
        }
        
+ Response 200 (application/json)
        
        {
            "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZGVudGl0eSI6Im1lcmN5IiwiaWF0IjoxNTIyOTAyMDI4LCJleHAiOjE1MjI5MDI5MjgsImZyZXNoIjpmYWxzZSwianRpIjoiMmUyM2FiZTItZDE3Ny00MGNkLWFkMmQtNjA1ODc2ZmUzYTUwIiwibmJmIjoxNTIyOTAyMDI4LCJ0eXBlIjoiYWNjZXNzIn0.K5Wip7c5U9nzLfWDWicNdLDBYAjU6Q2veSkWIHQPqwM"
        }

## user logout [/api/v1/auth/logout]

### logout [POST]

+ Request (application/json)

        {
            "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZGVudGl0eSI6Im1lcmN5IiwiaWF0IjoxNTIyOTAyMTQxLCJleHAiOjE1MjI5MDMwNDEsImZyZXNoIjpmYWxzZSwianRpIjoiOGU2Yzg0YTQtOTI1Zi00MGNkLWE1MjctNTQ0MWQyNzc5NGE4IiwibmJmIjoxNTIyOTAyMTQxLCJ0eXBlIjoiYWNjZXNzIn0.PBVWqd93nTcdnH7f1pcsc5yXLL86_C-tcFOnVE47zgU"
        }

+ Response 200 (application/json)

        {
            "token": "Revoked"
        }
        
## Books Collection [/api/v1/books/]

### List All Books [GET]

This endpoint retrieves all books that are in the system.

+ Response 200 (application/json)

        {
        "1": {
            "available": true,
            "title": "Python  programming",
            "author": "Mbuvi",
            "user_id": null
        },
        "2": {
            "available": true,
            "title": "C++  programming",
            "author": "Mbuvi",
            "user_id": null
        },
        "3": {
            "available": true,
            "title": "Flask  programming",
            "author": "Mbuvi",
            "user_id": null
        },
        "4": {
            "available": true,
            "title": "Android  programming",
            "author": "Mbuvi",
            "user_id": null
        },
        "5": {
            "available": true,
            "title": "PHP  programming",
            "author": "Mbuvi",
            "user_id": null
        }
        }
 


### Create a New Book [POST]

Administrators can create a new book by using the following endpoint and sending 
 the specified parameters.

+ Request (application/json)

        {
            'title': 'Test Driven Developemnt',
                'author': 'Kent Beck'
        }

+ Response 201 (application/json)

    + Headers

            Location: /api/v1/books/

    + Body

            {
            'title': 'Test Driven Developemnt', 
            'available': True, 
            'author': 'Kent Beck'
            }
            

## Get a single book [/api/v1/books/{book_id}]    

### Get A single book [GET]

User can retrieve a single book by providing its id.

+ Request (application/json)
        
+ Response 200 (application/json)

        {
        "available": true,
        "title": "Python  programming",
        "author": "Mbuvi",
        "user_id": null,
        "id": 1
         }


### Edit book info [PUT]
You can edit a book by hitting this endpoint with the book id, title and author of the book.
+ Request (application/json)
        
        {
            "author":"Musyoka", "title" : "Tips for joining Andela"
        }
        
+ Response 201 (application/json)

        {
            "message": "book updated"
        }
        
###Delete a book [DELETE]
You can delete a book by supplying the book id in on the url.
This deletes the book and returns the available books.


+ Request (application/json)
        
+ Response 200 (application/json)

        [
            "2": {
            "available": true,
            "title": "C++  programming",
            "author": "Mbuvi",
            "user_id": null
        },
        "3": {
            "available": true,
            "title": "Flask  programming",
            "author": "Mbuvi",
            "user_id": null
        },
        "4": {
            "available": true,
            "title": "Android  programming",
            "author": "Mbuvi",
            "user_id": null
        },
        "5": {
            "available": true,
            "title": "PHP  programming",
            "author": "Mbuvi",
            "user_id": null
        }
        ]
## Book renting [/api/v1/users/books/{book_id}]
### Rent a book [POST]

+ Request (application/json) 

        {
        "username" : "mercy"
        }

+ Response 200 (application/json)

        [
            {
                "author": "Python  programming",
                "title": "Mbuvi",
                "available": false,
                "user_id": 0
            }
        ]